import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppDispatch, AppThunk } from "../store";
import axios from "axios";
import {
  LeaveInter,
  // LeaveListType,
  // LeaveListDivisionType,
  // LeaveListUserType,
} from "../../interface/LeaveInterface";

export interface LeaveState {
  leave?: LeaveInter;
  leaveList?: LeaveInter[];
  // leaveListDivision?: LeaveListDivisionType;
  // leaveListUser?: LeaveInter[];
  openLeaveFormModal: boolean;
}

const initialState: LeaveState = {
  leaveList: [],
  // leaveListDivision: undefined,
  // leaveListUser: undefined,
  openLeaveFormModal: false,
};

export const getLeaveListAsync = createAsyncThunk(
  "leave/getLeaveListAsync",
  async () => {
    const res = await axios.get("/leave");
    // The value we return becomes the `fulfilled` action payload
    return res.data.data;
  }
);

export const getLeaveListDivisionAsync = createAsyncThunk(
  "leave/getLeaveListDivisionAsync",
  async (division_id: number) => {
    const res = await axios.get(`/leave/division/${division_id}`);
    // The value we return becomes the `fulfilled` action payload
    return res.data.data;
  }
);

export const getLeaveListUserAsync = createAsyncThunk(
  "leave/getLeaveListUserAsync",
  async (user_id: number) => {
    const res = await axios.get(`/leave/user/${user_id}`);
    // The value we return becomes the `fulfilled` action payload
    return res.data.data;
  }
);

export const leaveSlice = createSlice({
  name: "leave",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setOpenLeaveFormModal: (state, action: PayloadAction<boolean>) => {
      state.openLeaveFormModal = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(getLeaveListAsync.fulfilled, (state, action) => {
      state.leaveList = action.payload;
    });
    builder.addCase(getLeaveListAsync.rejected, (state, action) => {
      console.log("rejected");
      throw Error("getLeaveListAsync failed in redux");
    });

    builder.addCase(getLeaveListDivisionAsync.fulfilled, (state, action) => {
      state.leaveList = action.payload;
    });
    builder.addCase(getLeaveListDivisionAsync.rejected, (state, action) => {
      console.log("rejected");
      throw Error("getLeaveListDivisionAsync failed in redux");
    });

    builder.addCase(getLeaveListUserAsync.fulfilled, (state, action) => {
      state.leaveList = action.payload;
    });
    builder.addCase(getLeaveListUserAsync.rejected, (state, action) => {
      console.log("rejected");
      throw Error("getLeaveListUserAsync failed in redux");
    });
  },
});

export const { setOpenLeaveFormModal } = leaveSlice.actions;
// !!!CAUTION!!! select中state后面要接reducer名，而不是slice名

export const selectOpenModel = (state: RootState) =>
  state.leaveReducer.openLeaveFormModal;

export const selectLeaveList = (state: RootState) =>
  state.leaveReducer.leaveList;

// export const selectLeaveListDivision = (state: RootState) =>
//   state.leaveReducer.leaveListDivision;

// export const selectLeaveListUser = (state: RootState) =>
//   state.leaveReducer.leaveListUser;

export default leaveSlice.reducer;
