import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppDispatch, AppThunk } from "../store";
import axios from "axios";
import { TaskInter } from "../../interface/TaskInterface";

export interface TaskState {
  taskList?: TaskInter[];
  openTaskFormModal: boolean;
}

const initialState: TaskState = {
  taskList: [],
  openTaskFormModal: false,
};

export const getTaskList = createAsyncThunk("task/getTaskList", async () => {
  const res = await axios.get("/task");
  // The value we return becomes the `fulfilled` action payload
  return res.data.data;
});

export const taskSlice = createSlice({
  name: "task",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setOpenTaskFormModal: (state, action: PayloadAction<boolean>) => {
      state.openTaskFormModal = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(getTaskList.fulfilled, (state, action) => {
      console.log(action.payload);

      state.taskList = action.payload;
    });
    builder.addCase(getTaskList.rejected, (state, action) => {
      console.log("rejected");
      throw Error("getTaskList in redux failed");
    });
  },
});

export const { setOpenTaskFormModal } = taskSlice.actions;
// !!!CAUTION!!! select中state后面要接reducer名，而不是slice名
export const selectTaskList = (state: RootState) => state.taskReducer.taskList;

export const selectOpenModel = (state: RootState) =>
  state.taskReducer.openTaskFormModal;

export default taskSlice.reducer;
