import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppDispatch, AppThunk } from "../store";
import axios from "axios";
import { RecordInter } from "../../interface/RecordInterface";

export interface RecordState {
  record?: RecordInter;
  recordList?: RecordInter[];
  openRecordFormModal: boolean;
}

const initialState: RecordState = {
  recordList: [],
  openRecordFormModal: false,
};

export const getRecordListAsync = createAsyncThunk(
  "record/getRecordListAsync",
  async () => {
    const res = await axios.get("/record");
    // The value we return becomes the `fulfilled` action payload
    return res.data.data;
  }
);

export const getRecordListDivisionAsync = createAsyncThunk(
  "record/getRecordListDivisionAsync",
  async (division_id: number) => {
    const res = await axios.get(`/record/division/${division_id}`);
    // The value we return becomes the `fulfilled` action payload

    return res.data.data;
  }
);

export const getRecordListUserAsync = createAsyncThunk(
  "record/getRecordListUserAsync",
  async (user_id: number) => {
    const res = await axios.get(`/record/user/${user_id}`);
    // The value we return becomes the `fulfilled` action payload
    return res.data.data;
  }
);

export const recordSlice = createSlice({
  name: "record",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setOpenRecordFormModal: (state, action: PayloadAction<boolean>) => {
      state.openRecordFormModal = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(getRecordListAsync.fulfilled, (state, action) => {
      state.recordList = action.payload;
    });
    builder.addCase(getRecordListAsync.rejected, (state, action) => {
      console.log("rejected");
      throw Error("getRecordListAsync failed in redux");
    });

    builder.addCase(getRecordListDivisionAsync.fulfilled, (state, action) => {
      state.recordList = action.payload;
    });
    builder.addCase(getRecordListDivisionAsync.rejected, (state, action) => {
      console.log("rejected");
      throw Error("getRecordListDivisionAsync failed in redux");
    });

    builder.addCase(getRecordListUserAsync.fulfilled, (state, action) => {
      state.recordList = action.payload;
    });
    builder.addCase(getRecordListUserAsync.rejected, (state, action) => {
      console.log("rejected");
      throw Error("getRecordListUserAsync failed in redux");
    });
  },
});

export const { setOpenRecordFormModal } = recordSlice.actions;
// !!!CAUTION!!! select中state后面要接reducer名，而不是slice名

export const selectOpenModel = (state: RootState) =>
  state.recordReducer.openRecordFormModal;

export const selectRecordList = (state: RootState) =>
  state.recordReducer.recordList;

export default recordSlice.reducer;
