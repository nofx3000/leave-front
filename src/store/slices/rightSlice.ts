import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppDispatch, AppThunk } from "../store";
import axios from "axios";
import { RightInter } from "../../interface/RightInterface";

export interface RightState {
  rightList?: RightInter[];
  openRightFormModal: boolean;
}

const initialState: RightState = {
  rightList: [],
  openRightFormModal: false,
};

export const getRightList = createAsyncThunk("right/verifyToken", async () => {
  const res = await axios.get("/right");
  // The value we return becomes the `fulfilled` action payload
  return res.data.data;
});

export const rightSlice = createSlice({
  name: "right",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setOpenRightFormModal: (state, action: PayloadAction<boolean>) => {
      state.openRightFormModal = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(getRightList.fulfilled, (state, action) => {
      state.rightList = action.payload;
    });
    builder.addCase(getRightList.rejected, (state, action) => {
      console.log("rejected");
      throw Error("getRightList in redux failed");
    });
  },
});

export const { setOpenRightFormModal } = rightSlice.actions;
// !!!CAUTION!!! select中state后面要接reducer名，而不是slice名
export const selectRightList = (state: RootState) =>
  state.rightReducer.rightList;

export const selectOpenModel = (state: RootState) =>
  state.rightReducer.openRightFormModal;

export default rightSlice.reducer;
