import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppDispatch, AppThunk } from "../store";
import axios from "axios";
import { UserInfoInter } from "../../interface/UserInterface";

export interface UserinfoState {
  userinfo?: UserInfoInter;
  userList?: UserInfoInter[];
  token?: string;
  openUserFormModal: boolean;
}

const initialState: UserinfoState = {
  userinfo: undefined,
  userList: [],
  token: window.localStorage.getItem("token")
    ? (window.localStorage.getItem("token") as string)
    : undefined,
  openUserFormModal: false,
};

export const verifyTokenAsync = createAsyncThunk(
  "userinfo/verifyToken",
  async () => {
    const res = await axios.get("/user/verify1");
    // The value we return becomes the `fulfilled` action payload
    return res.data;
  }
);

export const getUserListAsync = createAsyncThunk(
  "userinfo/getUserListAsync",
  async () => {
    const res = await axios.get("/user");
    // The value we return becomes the `fulfilled` action payload
    return res.data.data;
  }
);

export const userinfoSlice = createSlice({
  name: "userinfo",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setToken: (state, action: PayloadAction<string>) => {
      state.token = action.payload;
    },
    setOpenUserFormModal: (state, action: PayloadAction<boolean>) => {
      state.openUserFormModal = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(verifyTokenAsync.fulfilled, (state, action) => {
      state.userinfo = action.payload;
    });
    builder.addCase(verifyTokenAsync.rejected, (state, action) => {
      console.log("rejected");
      throw Error("token is not authenticated");
    });
    builder.addCase(getUserListAsync.fulfilled, (state, action) => {
      state.userList = action.payload;
    });
    builder.addCase(getUserListAsync.rejected, (state, action) => {
      console.log("rejected");
      throw Error("getUserListAsync failed in redux");
    });
  },
});

export const { setToken, setOpenUserFormModal } = userinfoSlice.actions;
// !!!CAUTION!!! select中state后面要接reducer名，而不是slice名
export const selectUserinfo = (state: RootState) =>
  state.userinfoReducer.userinfo;

export const selectToken = (state: RootState) => state.userinfoReducer.token;

export const selectOpenModel = (state: RootState) =>
  state.userinfoReducer.openUserFormModal;

export const selectUserList = (state: RootState) =>
  state.userinfoReducer.userList;

export default userinfoSlice.reducer;
